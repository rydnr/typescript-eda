#+title: Application

The ~Application~ is the base class for all applications.

#+begin_src typescript :tangle ../../packages/eda-core/src/application/application.ts
import { Event } from '../domain/event';
import { PrimaryPort } from './primary-port';
import { Ports } from '../domain/ports';

export abstract class Application {
  public abstract readonly metadata: Map<string, unknown>;

  public async handle(events: Event | Event[]): Promise<void> {
    const eventQueue = Array.isArray(events) ? events : [events];
    while (eventQueue.length > 0) {
      const event = eventQueue.shift();
      if (!event) {
        continue;
      }
      const listeners = Reflect.getMetadata('listeners', this.constructor);
      for (const listener of listeners) {
        if (event.constructor.name === listener.event.constructor.name) {
          const result = await listener.descriptor.value.call(this, event);
          if (result) {
            eventQueue.push(...(Array.isArray(result) ? result : [result]));
          }
        }
      }
    }
  }

  public async start(): Promise<void> {
    const adapters = Reflect.getMetadata('adapters', this.constructor);
    for (const adapter of adapters) {
      const port = Reflect.getMetadata('port', adapter);
      if (port) {
        Ports.set(port, new adapter());
      }
    }
    const primaryPorts = adapters.filter((adapter) => {
      return new adapter() instanceof PrimaryPort;
    });
    for (const primaryPort of primaryPorts) {
      await new primaryPort().accept(this);
    }
  }
}
#+end_src
